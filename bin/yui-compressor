require 'rubygems'
require "yui/compressor"
require 'zlib'

begin
  gem "main", ">= 2.8.2" # 2.8.2 has a bugfix for the default block for -1 arity arguments
  require "main"
rescue
  Gem::LoadError
  STDERR.puts "need the main gem to run ci_console. sudo gem install main"
end


Main::Softspoken.off!
Main {
    description <<-EOS
    compress js or css files, will rename them filename.min.(js|css)
    EOS

    examples <<-EOS
    yui_compressor file.js # => file.min.js
    
    yui_compressor file.css # => file.min.css
    
    Add the -g or --gzip flag to gzip the file
    yui_compressor file.js --gzip # => file.min.js.gz
    
    EOS
    
    argument "file" do
      description "The javascript or css file to compress"
      required true
      attribute
    end
    
    option '-g', "gzip" do
      fattr
      description "gzip the compressed file"
    end
    
    option "munge" do
      fattr
      description "rename local variables - for javascript compression only"
    end
    
    option "css" do
      fattr
      description "process and minify file as css"
    end
    
    option "js" do
      fattr
      description "process and minify file as js"
    end
    
    class Cfile
      fattr :filename, :filetype, :js, :css, :file_string, :min_file, :old_size, :gzip_file
      def initialize(opts={})
        @file_string = opts[:file_string]
        @filename = opts[:filename]
        @filetype = opts[:filetype] || '.js'
        @min_file = opts[:min_file]
        @old_size = opts[:size]
        @gzip_file = opts[:gzip_file]
      end
      
      def js?
        self.filetype == '.js'
      end
      
      def css?
        self.filetype == '.css'
      end
    end
    
    def get_file
      raise "no such file: #{file}" unless File.exists?(file)
      file_string = File.open(file, 'rb'){|f| f.read }
      # TODO provide directory of files File.directory?
      filename = File.basename(file)      
      filetype = File.extname(filename)
      filetype = '.js' if js and filetype.empty?
      filetype = '.css' if css and filetype.empty?
      min_file = File.expand_path(file) << ".min"
      gzip_file = File.expand_path(file) << ".gz"
      unless %w".js .css".include?(filetype)
        raise "your file doesn't appear to have a .js or .css extension, please provide the appropriate flag (--js | --css) if you do not wish to name your file with an extension"
      end
      # TODO ignore .min if a directory given
      raise "really? you want to minify a minified file?" if filetype.include?(".min")
      cfile = Cfile.new(:file_string=>file_string, :filename=>filename, :filetype=>filetype, :min_file => min_file, :size => File.size(file), :gzip_file=>gzip_file)
      return cfile
    rescue StandardError => e
       puts e.inspect
    end
    
    run do
      file = get_file
      # TODO protect from minifying minified files
      puts "minifying #{file.filename} which is #{file.filetype} kind of file"
        
      compressor = file.js? ? YUI::JavaScriptCompressor.new(:munge=>munge) : YUI::CssCompressor.new
      unless gzip
        compressed = compressor.compress(file.file_string)
        puts "writing minified file to #{file.min_file}"
        File.open(file.min_file, 'wb'){|f| f.write compressed}
        puts "compressed from #{file.old_size}B to #{File.size(file.min_file)}B"
        
      else
        puts "writing gzipped and minified file to #{file.gzip_file}"
        
        Zlib::GzipWriter.open(file.gzip_file) do |gzip|
          compressor.compress(file.file_string) do |compressed|
            while buffer = compressed.read(4096)
              gzip.write(buffer)
            end
          end
        end
        puts "compressed from #{file.old_size}B to #{File.size(file.gzip_file)}B"
      end
      
      
      # ==== Example: Compress CSS
      #   compressor = YUI::CssCompressor.new
      #   compressor.compress(<<-END_CSS)
      #     div.error {
      #       color: red;
      #     }
      #     div.warning {
      #       display: none;
      #     }
      #   END_CSS
      #   # => "div.error{color:red;}div.warning{display:none;}"
      #
      # ==== Example: Compress JavaScript
      #   compressor = YUI::JavaScriptCompressor.new
      #   compressor.compress('(function () { var foo = {}; foo["bar"] = "baz"; })()')
      #   # => "(function(){var foo={};foo.bar=\"baz\"})();"
      #
      # ==== Example: Compress and gzip a file on disk
      #   File.open("my.js", "r") do |source|
      #     Zlib::GzipWriter.open("my.js.gz", "w") do |gzip|
      #       compressor.compress(source) do |compressed|
      #         while buffer = compressed.read(4096)
      #           gzip.write(buffer)
      #         end
      #       end
      #     end
      #   end
      #
    end
}

